分布式系统中如何保证集群中所有节点中的数据完全相同并且能够对某个提案达成一致是分布式系统正常工作的核心问题。
那么共识算法就是用来保证分布式系统一致性的方法。

理想的分布式系统一致性应满足以下三点：
1 可终止性，一致性的结果能在有限的时间内完成
2 共识性，不同节点最终完成决策的结果应该相同
3 合法性，决策的结果必须来自其他节点提出的提案（Proposal）

传统的分布式系统面临的问题：
节点增加减少，失效，故障，宕机等
节点之间网络通信可能存在干扰甚至阻断，运行速度也存在差异
拜占庭将军模型则是分布式领域中最复杂严格的容错模型，它允许节点作恶，即节点可以选择不响应甚至故意发送错误数据

CAP定理（20世纪末发布）：在异步的网络模型中，所有的节点由于没有时钟仅仅能根据接收到的消息作出判断，这是完全不能同时保证一致性、可用性和分区容错性，每一个系统只能在这三种特性中选择两种
FLP不可能定理：在网络可靠并且存在节点失效的异步模型系统中，不存在一个可以解决一致性问题的确定性算法

现实情况中，网络延迟一定存在，没有办法在分布式系统中做到强一致性的同时保证可用性，不过可以降低对一致性的要求，
在与可用性之间做出权衡，目前主流的分布式系统都选择最终一致性。
何为最终一致性，即允许多个节点的状态出现冲突，但所有能沟通的节点能在有限时间内解决冲突恢复到一支状态。
这里有2个重要条件：节点之间可以正常通信；冲突需要在有限时间内解决。只有这两个条件满足，才能达到最终一致性。

传统分布式系统的共识算法
Paxos
可以在没有恶意节点的前提下在节点出现错误时仍保持一致性，是第一个被证明完备的共识算法
缺点：难以理解，难以实现


Raft
Multi-Paxos的变种


定义：
如何选择合适的人来更新大账本的问题
制定记账人的选择规则并让大家遵守这个规则以此达到共识，就是区块链里的共识机制
共识机制是区块链节点就区块信息达到全网一致共识的机制

PoW(Proof of Work) 工作量证明
根据节点的工作量来执行货币的分配和记账权的确定
优点：简单易实现，作弊成本高，需要达到51%算力
缺点：资源消耗巨大，区块确认时间较长，容易产生分叉
例子：BTC，Dash, 门罗， LTC


PoS（Proof of Stake）权益证明
类似股权证明与投票机制选择记账人，持有股权越多则特权越大，需负担更多责任出块，同时获得更多权益
采用币龄计算记账权，每个币持有一天计为一个币龄。如果完成一次记账则清空币龄
优点：缩短了确认时间，不需要消耗大量资源
缺点：